<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="CL_Defect" Id="{15178125-5b87-4ebe-aa9b-003631375054}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'}
FUNCTION_BLOCK CL_Defect IMPLEMENTS ITF_Defect
VAR
 	_State              : E_DefectState := E_DefectState.None; 
	
	_ErrorIndex					:	UDINT;
	_ClassIndex					:	UDINT;
	
  _ErrorID            : STRING(3);
  _ClassID            : STRING(3);
  
	_DefectMngr	        : REFERENCE TO CL_DefectManager;
	_bRegistered		    : BOOL := FALSE;
	
	_Severity           : TcEventSeverity := TcEventSeverity.Critical;//temporary solution without database
		
	//used to send Telegram msg
	bTelAlarmSent       : BOOL := FALSE;
  bTelInfoSent        : BOOL := FALSE;
	bTelRegisteredSent	: BOOL := FALSE;
  
  bHideDefect	        : BOOL := true;
	
	_RisingEdge         : DATE_AND_TIME;//STRING(32);
	_FallingEdge		    : DATE_AND_TIME;//STRING(32);
	
	{attribute 'instance-path'}
	{attribute 'no_init'}
	_InstancePath       : T_InstancePath;
	InstanceStr_P		    : POINTER TO T_StringBuffer;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Ack" Id="{8c29abf3-50d7-4b45-a275-99bb2ba3662b}">
      <Declaration><![CDATA[METHOD PUBLIC Ack
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF State = E_DefectState.Active THEN
  _State := E_DefectState.ActiveAndAck;
ELSIF State = E_DefectState.OffAndNotAck THEN
  _State := E_DefectState.Off;
	DefectSentToFalse();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="BuildStringMsg" Id="{3fbf6b19-dcd9-467d-b8c9-5e6a3e80236d}">
      <Declaration><![CDATA[METHOD PUBLIC BuildStringMsg : BOOL
//return false if no error 
VAR_INPUT
	sMsgOut_P       : POINTER TO T_StringBuffer;//return the Telegram message
  sTextOut_P      : POINTER TO T_StringBuffer;//return the ADS console message  
  stShow          : ST_ShowMsgFields;
END_VAR
VAR
	bTmpErr			    : BOOL;
	bTmp1Err		    : BOOL;
  nErrIdOut       : UDINT;
	fbFormatStr	    : FB_FormatString;
  
	severityStr	    : T_MaxString;
	stateStr        : T_MaxString;
	sMsgAddLine	    :	T_MaxString;
  sMsgTmp         : T_MaxString;
  sClassID        : T_MaxString;
  sErrorID        : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[BuildStringMsg := FALSE;
sClassID := _ClassID;
sErrorID := _ErrorID;

CASE _State OF
		E_DefectState.None : stateStr := 'None';
		E_DefectState.Off : stateStr := 'Off';
		E_DefectState.Active : stateStr := 'Active';
		E_DefectState.ActiveAndAck : stateStr := 'ActiveAndAck';
		E_DefectState.OffAndNotAck : stateStr := 'OffAndNotAck';
END_CASE

CASE _Severity OF
		TcEventSeverity.Critical : severityStr := 'Critical';
		TcEventSeverity.Error : severityStr := 'Error';
		TcEventSeverity.Info : severityStr := 'Info';
		TcEventSeverity.Verbose : severityStr := 'Verbose';
		TcEventSeverity.Warning : severityStr := 'Warning';
END_CASE

IF stShow.bTxtLog AND (sTextOut_P<>0) THEN 
  // Shorter, because issue for too long strings 
  IF _DefectMngr.NumIrrLinesForHMI <= 1 THEN
    IF _DefectMngr.MRIrrLine = 0 THEN
      sMsgAddLine := UINT_TO_STRING(_DefectMngr.MRIrrLineFixedID);
      sMsgAddLine := concat('Main cabinet ',sMsgAddLine);
      sMsgAddLine := concat(sMsgAddLine,' - ');
    ELSE
      sMsgAddLine := UINT_TO_STRING(_DefectMngr.MRIrrLineFixedID);
      sMsgAddLine := concat('Line ',sMsgAddLine);
      sMsgAddLine := concat(sMsgAddLine,' - ');    
		END_IF
  ELSE
    IF _DefectMngr.MRIrrLine = 0 THEN
      sMsgAddLine := 'for all lines';
      sMsgAddLine := concat('Main cabinet ',sMsgAddLine);
      sMsgAddLine := concat(sMsgAddLine,' - ');
    ELSE
      sMsgAddLine := UINT_TO_STRING(_DefectMngr.MRIrrLine);
      sMsgAddLine := concat('Line ',sMsgAddLine);
      sMsgAddLine := concat(sMsgAddLine,' - ');
 	  END_IF
  END_IF
  
  fbFormatStr(
    sFormat	:= '$N Severity: %s  Status: %s  ClassID: %s  ErrID: %s $N InstancePath: %s $N Message sender: %s', 
    arg1  := F_STRING(severityStr),
    arg2	:= F_STRING(stateStr),
    arg3	:= F_STRING(sClassID),
    arg4	:= F_STRING(sErrorID), 
    arg5	:= F_STRING(_InstancePath),
    arg6  := F_STRING(sMsgAddLine),
    bError => bTmp1Err,  
    nErrId => nErrIdOut, 
    sOut	=> sTextOut_P^);
  
  IF bTmp1Err THEN
    sMsgTmp := ' FB_FormatStr Error : $N ';
    bTmp1Err := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
    sMsgTmp := UDINT_TO_STRING(nErrIdOut);
    bTmp1Err := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
    sMsgTmp := ' $N ';
    bTmp1Err := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
	END_IF
 
  //concat class description short
  IF NOT bTmpErr THEN
    sMsgTmp := _DefectMngr.ErrorDB.GetClassShortMsg(_ClassIndex);
    sMsgTmp := concat(sMsgTmp,'$N');
    bTmpErr := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
  END_IF	
   
  //concat error description short
  IF NOT bTmp1Err THEN
    sMsgTmp := ' Message description: ';	
    bTmp1Err := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
  END_IF
  IF NOT bTmp1Err THEN
    sMsgTmp := _DefectMngr.ErrorDB.GetErrorShortMsg(_ErrorIndex);     
    bTmp1Err := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
  END_IF	
  //concat twice new line
  IF NOT bTmp1Err THEN
    sMsgTmp := ' $N $N';	
    bTmp1Err := NOT CONCAT2(sTextOut_P,ADR(sMsgTmp),sTextOut_P,SIZEOF(T_StringBuffer));
  END_IF  
ELSE
  bTmp1Err := TRUE;
END_IF

//Telegram API new line character is %0A
//to insert it inside format string the Telegram use %%0A, while inside concat use %0A
//build the sMsgOut_P string buffers used to sent Telegram message
IF sMsgOut_P <>0 THEN
	bTmpErr := FALSE;
	IF stShow.bIstance THEN 
		fbFormatStr(
      sFormat	:= '%%0ASeverity: %S  Status: %S  ClassID: %S  ErrID: %S %%0AInstancePath: %S %%0AMessage sender: %s',
      arg1  := F_STRING(severityStr),
      arg2	:= F_STRING(stateStr),
      arg3	:= F_STRING(sClassID),
      arg4	:= F_STRING(sErrorID), 
      arg5	:= F_STRING(_InstancePath),
      arg6  := F_STRING(sMsgAddLine),    
      bError	=> bTmpErr,  
      nErrId	=> nErrIdOut, 
      sOut	=> sMsgOut_P^);
	ELSE
		fbFormatStr(
      sFormat	:= '%%0ASeverity: %S  Status: %S  ClassID: %S  ErrID: %S %%0AMessage sender: %s',
      arg1  := F_STRING(severityStr),
      arg2	:= F_STRING(stateStr),
      arg3	:= F_STRING(sClassID),
      arg4	:= F_STRING(sErrorID), 
      arg5  := F_STRING(sMsgAddLine),    
      bError	=> bTmpErr,  
      nErrId	=> nErrIdOut, 
      sOut	=> sMsgOut_P^);
	END_IF
  
  //build class description
  IF stShow.bLongClass THEN
    sMsgTmp := _DefectMngr.ErrorDB.GetClassLongMsg(_ClassIndex);
  ELSE
    sMsgTmp := _DefectMngr.ErrorDB.GetClassShortMsg(_ClassIndex);
	END_IF  
  IF NOT bTmpErr THEN
    sMsgTmp := concat(sMsgTmp,'%0A');
    bTmpErr := NOT CONCAT2(sMsgOut_P,ADR(sMsgTmp),sMsgOut_P,SIZEOF(T_StringBuffer));
  END_IF	
  
  //build error description either long or short
  IF NOT bTmpErr THEN
    sMsgTmp := 'Message description:%0A';	
    bTmpErr := NOT CONCAT2(sMsgOut_P,ADR(sMsgTmp),sMsgOut_P,SIZEOF(T_StringBuffer));
  END_IF
  IF stShow.bLongError THEN
    sMsgTmp := _DefectMngr.ErrorDB.GetErrorLongMsg(_ErrorIndex);
  ELSE
    sMsgTmp := _DefectMngr.ErrorDB.GetErrorShortMsg(_ErrorIndex);
	END_IF  
  IF NOT bTmpErr THEN
    bTmpErr := NOT CONCAT2(sMsgOut_P,ADR(sMsgTmp),sMsgOut_P,SIZEOF(T_StringBuffer));
  END_IF	

  //build remed description
  IF NOT bTmpErr AND stShow.bRemed THEN
    sMsgAddLine := '%0A Correction:%0A';
    bTmpErr := NOT CONCAT2(sMsgOut_P,ADR(sMsgAddLine),sMsgOut_P,SIZEOF(T_StringBuffer));
  END_IF   
  IF NOT bTmpErr AND stShow.bRemed THEN
    sMsgTmp := _DefectMngr.ErrorDB.GetErrorRemedMsg(_ErrorIndex);
    bTmpErr := NOT CONCAT2(sMsgOut_P,ADR(sMsgTmp),sMsgOut_P,SIZEOF(T_StringBuffer));
  END_IF
  
END_IF//sMsgOut_P <>0 THEN
BuildStringMsg := NOT(bTmpErr OR bTmp1Err);]]></ST>
      </Implementation>
    </Method>
    <Property Name="CanSendAlarmMsg" Id="{a204988a-66ae-47e9-a056-f119d2f2e1ba}">
      <Declaration><![CDATA[PROPERTY PUBLIC CanSendAlarmMsg : BOOL]]></Declaration>
      <Get Name="Get" Id="{fcd35725-5151-4b31-99ff-e0af66c76ec1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CanSendAlarmMsg := NOT bTelAlarmSent AND _bRegistered;
if CanSendAlarmMsg then
  bTelAlarmSent := TRUE;
end_if]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CanSendInfoMsg" Id="{192a9537-1f8b-4f9f-8333-df16e40a98d8}">
      <Declaration><![CDATA[PROPERTY PUBLIC CanSendInfoMsg : BOOL]]></Declaration>
      <Get Name="Get" Id="{7714ed16-8869-4a97-8f77-d66a6e2e078b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CanSendInfoMsg := NOT bTelInfoSent AND _bRegistered;
if CanSendInfoMsg then
  bTelInfoSent := TRUE;
end_if]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CanSendRegisterMsg" Id="{85b1138c-1583-4d32-9377-41c32d7e3328}">
      <Declaration><![CDATA[PROPERTY PUBLIC CanSendRegisterMsg : BOOL]]></Declaration>
      <Get Name="Get" Id="{d973e6bb-7bdd-451e-850c-2191c15990ae}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CanSendRegisterMsg := NOT bTelRegisteredSent AND _bRegistered;//bTelRegisteredSent = false only at Init time
if CanSendRegisterMsg then
  bTelRegisteredSent := TRUE;
end_if]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ClassID" Id="{5a02e236-d319-41d8-895b-af4b89567a56}">
      <Declaration><![CDATA[PROPERTY PUBLIC ClassID : STRING(3)]]></Declaration>
      <Get Name="Get" Id="{ee0c912f-d8aa-4c70-ad6f-6db4079577d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassID := _ClassID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DefectSentToFalse" Id="{b4454f50-ebd6-42cd-b04e-fa0b98d6b46d}">
      <Declaration><![CDATA[METHOD PUBLIC DefectSentToFalse
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bTelAlarmSent := FALSE;
bTelInfoSent := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Description" Id="{b79e4a6d-6da3-4efa-a729-3209c771b301}">
      <Declaration><![CDATA[PROPERTY PUBLIC Description : String]]></Declaration>
      <Get Name="Get" Id="{a592b11a-fd05-4787-8a73-0f741ccc819f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[//Description := CONCAT(_ErrorLongMsg,_RemedMsg);
Description := _DefectMngr.ErrorDB.GetErrorShortMsg(_ErrorIndex);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorID" Id="{aaad1f52-427f-4077-861e-f7dfac872e75}">
      <Declaration><![CDATA[PROPERTY PUBLIC ErrorID : STRING(3);]]></Declaration>
      <Get Name="Get" Id="{95017a63-b7a1-457d-9dda-5117d1632525}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorID := _ErrorID;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="FallingEdge" Id="{de0092e2-cbb0-4fc0-96e3-eb37533d6ae8}">
      <Declaration><![CDATA[PROPERTY PUBLIC FallingEdge : DATE_AND_TIME]]></Declaration>
      <Get Name="Get" Id="{71166727-89f7-4d09-8ce0-f501c1c7b9ed}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[FallingEdge := _FallingEdge;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{993e5927-6f23-47cd-8a74-dc1278d161ff}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains	: BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode		: BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	pos					  : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[InstanceStr_P := ADR(_InstancePath);
//BUG in FB_IotHttpRequest: cannot build the URL with the name of Project in it; why!! otherwise the URL 
//sent to Telegram Web API return server error.  Remove from the instance string the name of the project!
//find the first occurence of '.'
pos := FIND2(InstanceStr_P,ADR('.'));
DELETE2(InstanceStr_P,InstanceStr_P,SIZEOF(InstanceStr_P^),pos,1);//delete project name
//find the second occurence of '.'
pos := FIND2(InstanceStr_P,ADR('.'));
DELETE2(InstanceStr_P,InstanceStr_P,SIZEOF(InstanceStr_P^),pos,1);//delete PLC name]]></ST>
      </Implementation>
    </Method>
    <Property Name="HideDefect" Id="{7c8e1473-279e-4978-bb72-35ce6dc53176}">
      <Declaration><![CDATA[PROPERTY PUBLIC HideDefect : bool]]></Declaration>
      <Get Name="Get" Id="{c900ab48-394c-484a-b09d-b7bbae2c96b3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[HideDefect := bHideDefect;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="InstancePath" Id="{f3a6bf0d-6cba-496a-bcdc-0381f12508b3}">
      <Declaration><![CDATA[PROPERTY PUBLIC InstancePath : T_InstancePath]]></Declaration>
      <Get Name="Get" Id="{f9e4f5ef-8538-4a6a-9c64-fe9d0ca0ceda}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[InstancePath := _InstancePath;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Register" Id="{87d2b7aa-138a-4efb-acc4-ac6598703d83}">
      <Declaration><![CDATA[METHOD PUBLIC Register : BOOL
VAR_INPUT
	DefectMngr    : REFERENCE TO CL_DefectManager;
  inClassID	    :	STRING(3);
  inErrorID     :	STRING(3);
END_VAR
VAR
	i                   : UINT;
	ArrayIsFull         : INT;
	indDefectLine       : UDINT;
	DefectNumericStruct	:	ST_classAndErrorNum;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Register := _bRegistered := FALSE;
IF __ISVALIDREF(DefectMngr) THEN 
  _ErrorID := inErrorID;
  _ClassID := inClassID;
  
  bHideDefect := true;
	_DefectMngr REF= DefectMngr;
  
  //this part of code was not inside IF __ISVALIDREF(DefectManager)...we have to check before all that the reference to the DefectManager is good
  // Only way to have access to elements of an object stored into another one: method to extract the whole object!
  // TwinCAT or ST limitations!
  _DefectMngr.SearchDefectDB(errorID := inErrorID, classID := inClassID, udiDBErrorIndex => _ErrorIndex, udiDBClassIndex => _ClassIndex);
  
  (*
  DefectNumericStruct := _DefectMngr.ErrorDB.GetNumerics(udiErrorIndex := _ErrorIndex, udiClassIndex := _ClassIndex);  @@really buggy this method sometime it return ErrorID or ClassID wrong sometime not!!
  _ErrorID  := DefectNumericStruct.errorId; // Now, three digits IDs!
  _ClassID  := DefectNumericStruct.classId;	// Relation between classes and error IDs done in ST code again! (unique errorIDs across the classes)
  *)
  
  CASE _DefectMngr.ErrorDB.WhichSeverity(_ErrorIndex) OF
      0:  _Severity := TcEventSeverity.Verbose;
      1:  _Severity := TcEventSeverity.Info;
      2:  _Severity := TcEventSeverity.Warning;
      3:  _Severity := TcEventSeverity.Error;
      4:  _Severity := TcEventSeverity.Critical;
  END_CASE
	
	FOR i:= 1 TO _DefectMngr.nMaxDefects DO	
		IF (i = _DefectMngr.nMaxDefects) AND (_DefectMngr.List(i,0) = 0) THEN // List of Defects is already full => Error
      _DefectMngr.ArrayIsFull := TRUE;
      ADSLOGSTR(ADSLOG_MSGTYPE_MSGBOX, 'Fatal error: too many defects: increase the array size and recompile','');
		ELSIF _DefectMngr.List(i,0) = THIS THEN // Defect already in the list
      Register := _bRegistered := TRUE;
			EXIT;
		ELSIF _DefectMngr.List(i,0) = 0 THEN // Add Defect in the list
			_DefectMngr.List(i,THIS);
			Register := _bRegistered := TRUE;
			EXIT;
		END_IF
	END_FOR
  
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="RisingEdge" Id="{3bbddc04-efc2-4c4d-a5c0-96dcc27b9ebe}">
      <Declaration><![CDATA[PROPERTY PUBLIC RisingEdge : DATE_AND_TIME]]></Declaration>
      <Get Name="Get" Id="{82fdcf12-9f88-4cc4-9d52-d88475eda07c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[RisingEdge := _RisingEdge;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Set" Id="{317e56ad-4388-4346-bef8-22c94aa78b51}">
      <Declaration><![CDATA[METHOD Set
VAR_INPUT
  bSetActivate : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bSetActivate AND State <> E_DefectState.Active AND State <> E_DefectState.ActiveAndAck THEN
  _State := E_DefectState.Active;
  _RisingEdge	:= _DefectMngr._objActTime_R.GetDateTime;
  _FallingEdge := DT#1970-1-1-0:0:0;//DATE_AND_TIME#1970-1-1-0:0:0
  UpdateHideDefect();
ELSIF NOT bSetActivate THEN
	IF State = E_DefectState.Off OR State = E_DefectState.OffAndNotAck THEN
    //Alarm and Info messages can be sent again only if the Defect return to E_DefectState.Off
    IF State = E_DefectState.Off THEN
		  DefectSentToFalse();
    END_IF
	END_IF
  IF State = E_DefectState.Active THEN
    _State := E_DefectState.OffAndNotAck;
		_FallingEdge	:= _DefectMngr._objActTime_R.GetDateTime;//_DefectMngr.ActTime;
    UpdateHideDefect();
  ELSIF State = E_DefectState.ActiveAndAck THEN
    _State := E_DefectState.Off;
		_FallingEdge := _DefectMngr._objActTime_R.GetDateTime;//_DefectMngr.ActTime;
    UpdateHideDefect();
  ELSIF State = E_DefectState.None THEN
    _State := E_DefectState.Off;
    UpdateHideDefect();
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetOff" Id="{95b96f71-6c7a-43a0-8983-c196a0a878b1}">
      <Declaration><![CDATA[METHOD PUBLIC SetOff
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Set(false);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetOn" Id="{c6277ba6-9f43-4e92-a278-b7168384b93c}">
      <Declaration><![CDATA[METHOD PUBLIC SetOn
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Set(TRUE);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Severity" Id="{596ff0dc-1f9f-42e3-a88b-dd768e4c4b2b}">
      <Declaration><![CDATA[PROPERTY Severity : TcEventSeverity]]></Declaration>
      <Get Name="Get" Id="{25cec410-7fc4-43c7-a942-3066bfb941aa}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Severity := _Severity;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="State" Id="{da93c3d1-0a61-41b7-ace4-2e79648a1e30}">
      <Declaration><![CDATA[PROPERTY State : E_DefectState]]></Declaration>
      <Get Name="Get" Id="{9bb10243-1977-4653-8480-82910d904215}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[State := _State;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="UpdateHideDefect" Id="{ce503e5f-2ddd-4972-942e-a2fbaeb315e7}">
      <Declaration><![CDATA[METHOD PRIVATE UpdateHideDefect
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bHideDefect := NOT (State = E_DefectState.Off) and NOT (State = E_DefectState.OffAndNotAck ) and not (State = E_DefectState.Active );]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>